/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
private:
    unordered_map<int, int> index;
public:
    TreeNode* myTree(vector<int>& preorder, vector<int>& inorder, int preorder_left
                     , int preorder_right, int inorder_left, int inorder_right){
        if(preorder_left > preorder_right)  return nullptr;
        int preorder_root = preorder_left;
        int inorder_root = index[preorder[preorder_root]];
        int size_left_subtree = inorder_root - inorder_left;
        TreeNode* root = new TreeNode(preorder[preorder_root]);
        root->left = myTree(preorder, inorder, preorder_left + 1, preorder_left + size_left_subtree
                            , inorder_left, inorder_root - 1);
        root->right = myTree(preorder, inorder, preorder_left + 1 + size_left_subtree, preorder_right
                             , inorder_root + 1, inorder_right);
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        for(int i = 0; i < inorder.size(); i++){
            index[inorder[i]] = i;
        }
        return myTree(preorder, inorder, 0, inorder.size()-1, 0, preorder.size()-1);
    }
};

//runtime:16 ms
//memory:24.9 MB
